from timeit import time
# import bigfloat as bf
import gmpy2 as gp
import numpy as np
import matplotlib.pyplot as plt
from tap import Tap


def compute_timings():
    # operations = [bf.add, bf.mul, bf.sub, bf.div]
    operations = [gp.add, gp.mul, gp.sub, gp.div]
    labels = ["add", "mul", "sub", "div"]

    for label, operation in zip(labels, operations):
        precisions, times = [], []
        for i in range(3, 45):
            p = int(1.3**i)
            precisions.append(p)
            gp.set_context(gp.context(precision=p))
            start = time.time()
            pi = gp.const_pi()
            e = gp.exp(1)
            a = operation(e, pi)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)

            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            # pi = bf.const_pi(context)
            # e = bf.exp(1, context)
            # a = operation(e, pi, context)
            end = time.time()
            times.append(end-start)
        plt.plot(precisions, times, label=label)
        plt.legend()
        plt.xlabel('Precision')
        plt.ylabel('Time')
    plt.show()


def load_file(filename: str):
    with open(filename, 'r') as f:
        text = f.read()
    op_texts = text.split("\n\n***===***\n")
    labels = ["add", "sub", "mul", "div"]
    for op_text, label in zip(op_texts, labels):
        times, precisions = [], []
        for line in op_text.split("\n"):
            tokens = line.split()
            if tokens:
                times.append(float(tokens[0]))
                precisions.append(int(tokens[-1]))
        print(precisions, times)
        print(max(times))
        label = label
        plt.plot(precisions, times, label=label)
        plt.legend()
        plt.xlabel('Precision')
        plt.ylabel('Time')
    plt.show()


if __name__ == "__main__":
    # compute_timings()

    class ArgParse(Tap):
        filename: str
    args = ArgParse().parse_args()
    load_file(args.filename)
# for label, operation in zip(labels, operations):
#     precision = 10
#     precisions = []
#     ratios = []
#     ratio = 0
#     print(label)
#     while ratio < 2:
#         test_precisions = [precision, 2 * precision]
#         times = []
#         for p in test_precisions:
#             context = bf.precision(p) + bf.RoundTowardZero
#             start = time.time()
#             pi = bf.const_pi(context)
#             e = bf.exp(1, context)
#             a = operation(e, pi, context)
#             end = time.time()
#             ts.append(end - start)
#             times.append(sum(ts) / len(ts))
#         ratio = times[1] / times[0]
#         ratios.append(ratio)
#         precisions.append(precision)
#         precision *= 2
#         print(precision)

#     print("Precision at which doubling precision takes twice the time for", label, "is:", precision)

#     plt.plot(precisions, ratios, label=label)
#     plt.legend()
#     plt.xlabel('Precision')
#     plt.ylabel('Ratio between time at precision at 2p and p')
# plt.show()

# 1) super high precision
# 2) throw out overhead
# 3) performance estimation is too hard (maybe some surrogate method)